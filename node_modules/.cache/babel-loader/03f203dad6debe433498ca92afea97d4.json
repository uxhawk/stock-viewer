{"ast":null,"code":"var _jsxFileName = \"/Users/uxhawk/dev/stock-viewer/src/utils/GlobalState.js\";\nimport React, { createContext, useReducer, useContext } from \"react\";\nimport { ADD_SYMBOLS, UPDATE_PRICE } from \"./actions\";\nconst StoreContext = createContext();\nconst {\n  Provider\n} = StoreContext;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ADD_SYMBOLS:\n      return { ...state,\n        autoFillSymbols: [...action.symbols, ...state.autoFillSymbols]\n      };\n\n    case UPDATE_PRICE:\n      return { ...state,\n        marketList: state.marketList.IndexOf(market => {\n          if (market.name === action.id) {\n            return market.lastUpdate = new Date(Date.now()).toLocaleString();\n          }\n        })\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst StoreProvider = ({\n  value = [],\n  ...props\n}) => {\n  const [state, dispatch] = useReducer(reducer, {\n    marketList: [{\n      name: 'S&P 500',\n      currentPrice: 0,\n      lastUpdate: new Date(Date.now()).toLocaleString()\n    }, {\n      name: 'Dow Jones',\n      currentPrice: 0,\n      lastUpdate: new Date(Date.now()).toLocaleString()\n    }, {\n      name: 'Nasdaq',\n      currentPrice: 0,\n      lastUpdate: new Date(Date.now()).toLocaleString()\n    }],\n    autoFillSymbols: [],\n    watchList: [],\n    portfolio: []\n  });\n  return /*#__PURE__*/React.createElement(Provider, Object.assign({\n    value: [state, dispatch]\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }\n  }));\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","map":{"version":3,"sources":["/Users/uxhawk/dev/stock-viewer/src/utils/GlobalState.js"],"names":["React","createContext","useReducer","useContext","ADD_SYMBOLS","UPDATE_PRICE","StoreContext","Provider","reducer","state","action","type","autoFillSymbols","symbols","marketList","IndexOf","market","name","id","lastUpdate","Date","now","toLocaleString","StoreProvider","value","props","dispatch","currentPrice","watchList","portfolio","useStoreContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,QAA6D,OAA7D;AACA,SACEC,WADF,EACeC,YADf,QAEO,WAFP;AAIA,MAAMC,YAAY,GAAGL,aAAa,EAAlC;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAeD,YAArB;;AAEA,MAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,WAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELG,QAAAA,eAAe,EAAE,CAAC,GAAGF,MAAM,CAACG,OAAX,EAAoB,GAAGJ,KAAK,CAACG,eAA7B;AAFZ,OAAP;;AAKA,SAAKP,YAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELK,QAAAA,UAAU,EAAEL,KAAK,CAACK,UAAN,CAAiBC,OAAjB,CAA0BC,MAAD,IAAY;AAC/C,cAAIA,MAAM,CAACC,IAAP,KAAgBP,MAAM,CAACQ,EAA3B,EAA+B;AAC7B,mBAAOF,MAAM,CAACG,UAAP,GAAoB,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,EAAqBC,cAArB,EAA3B;AACD;AACF,SAJW;AAFP,OAAP;;AASN;AACE,aAAOb,KAAP;AAlBF;AAoBD,CArBD;;AAuBA,MAAMc,aAAa,GAAG,CAAC;AAAEC,EAAAA,KAAK,GAAG,EAAV;AAAc,KAAGC;AAAjB,CAAD,KAA8B;AAClD,QAAM,CAAChB,KAAD,EAAQiB,QAAR,IAAoBxB,UAAU,CAACM,OAAD,EAAU;AAC5CM,IAAAA,UAAU,EAAE,CACV;AACEG,MAAAA,IAAI,EAAE,SADR;AAEEU,MAAAA,YAAY,EAAE,CAFhB;AAGER,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,EAAqBC,cAArB;AAHd,KADU,EAMV;AACEL,MAAAA,IAAI,EAAE,WADR;AAEEU,MAAAA,YAAY,EAAE,CAFhB;AAGER,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,EAAqBC,cAArB;AAHd,KANU,EAWV;AACEL,MAAAA,IAAI,EAAE,QADR;AAEEU,MAAAA,YAAY,EAAE,CAFhB;AAGER,MAAAA,UAAU,EAAE,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,EAAqBC,cAArB;AAHd,KAXU,CADgC;AAmB5CV,IAAAA,eAAe,EAAE,EAnB2B;AAoB5CgB,IAAAA,SAAS,EAAE,EApBiC;AAqB5CC,IAAAA,SAAS,EAAE;AArBiC,GAAV,CAApC;AAwBA,sBAAO,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,CAACpB,KAAD,EAAQiB,QAAR;AAAjB,KAAwCD,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CA1BD;;AA4BA,MAAMK,eAAe,GAAG,MAAM;AAC5B,SAAO3B,UAAU,CAACG,YAAD,CAAjB;AACD,CAFD;;AAIA,SAASiB,aAAT,EAAwBO,eAAxB","sourcesContent":["import React, { createContext, useReducer, useContext } from \"react\";\nimport {\n  ADD_SYMBOLS, UPDATE_PRICE\n} from \"./actions\";\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ADD_SYMBOLS:\n      return {\n        ...state,\n        autoFillSymbols: [...action.symbols, ...state.autoFillSymbols]\n      };\n\n      case UPDATE_PRICE:\n        return {\n          ...state,\n          marketList: state.marketList.IndexOf((market) => {\n            if (market.name === action.id) {\n              return market.lastUpdate = new Date(Date.now()).toLocaleString()\n            } \n          })\n        };\n\n  default:\n    return state;\n  }\n};\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = useReducer(reducer, {\n    marketList: [\n      {\n        name: 'S&P 500',\n        currentPrice: 0,\n        lastUpdate: new Date(Date.now()).toLocaleString(),\n      },\n      {\n        name: 'Dow Jones',\n        currentPrice: 0,\n        lastUpdate: new Date(Date.now()).toLocaleString(),\n      },\n      {\n        name: 'Nasdaq',\n        currentPrice: 0,\n        lastUpdate: new Date(Date.now()).toLocaleString(),\n      },\n\n    ],\n    autoFillSymbols: [],\n    watchList: [],\n    portfolio: [],\n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n"]},"metadata":{},"sourceType":"module"}